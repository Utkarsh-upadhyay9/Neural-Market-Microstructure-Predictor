""" Streamlit dashboard for the Neural Market Microstructure Predictor. """ import streamlit as st import pandas as pd import numpy as np import plotly.graph_objects as go import plotly.express as px from datetime import datetime, timedelta import sys import os # Add parent directory to path sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))) from src.prediction.predictor import MarketPredictor from src.data.collector import DataCollector from utils import setup_logging # Configure Streamlit page st.set_page_config( page_title="Neural Market Predictor", page_icon="", layout="wide", initial_sidebar_state="expanded" ) # Custom CSS st.markdown(""" <style> .main-header { font-size: 3rem; color: #1f77b4; text-align: center; margin-bottom: 2rem; } .metric-card { background-color: #f0f2f6; padding: 1rem; border-radius: 0.5rem; margin: 0.5rem 0; } .success-text { color: #28a745; font-weight: bold; } .danger-text { color: #dc3545; font-weight: bold; } </style> """, unsafe_allow_html=True) def main(): """Main dashboard function.""" # Header st.markdown('<h1 class="main-header"> Neural Market Microstructure Predictor</h1>', unsafe_allow_html=True) st.markdown('<p style="text-align: center; color: #666;"> User: Utkarsh-upadhyay9 | Built: August 2025</p>', unsafe_allow_html=True) # Sidebar st.sidebar.title(" Control Panel") # Model selection available_models = ['lstm', 'cnn', 'attention'] selected_models = st.sidebar.multiselect( " Select Models", available_models, default=['lstm'] ) # Symbol selection default_symbols = ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'TSLA', 'NVDA'] selected_symbols = st.sidebar.multiselect( " Select Symbols", default_symbols + ['META', 'NFLX', 'ORCL', 'CRM'], default=default_symbols[:3] ) # Prediction button predict_button = st.sidebar.button(" Generate Predictions", type="primary") # Auto-refresh option auto_refresh = st.sidebar.checkbox(" Auto-refresh (every 5 min)") if auto_refresh: st.rerun() # Main content if predict_button and selected_symbols and selected_models: with st.spinner(" Loading models and generating predictions..."): try: # Initialize predictor predictor = MarketPredictor() # Load models if predictor.load_models(selected_models): # Make predictions predictions = predictor.predict_multiple_symbols(selected_symbols, selected_models) if predictions.get('symbols'): display_predictions(predictions, selected_models) else: st.error(" No predictions generated") else: st.error(" Failed to load models. Please ensure models are trained first.") st.info(" Run: `python scripts/train_enhanced.py --models lstm`") except Exception as e: st.error(f" Error: {str(e)}") elif not selected_symbols: st.warning(" Please select at least one symbol") elif not selected_models: st.warning(" Please select at least one model") else: # Show sample data and model info show_model_info() show_sample_data() def display_predictions(predictions, selected_models): """Display prediction results.""" # Summary metrics st.subheader(" Prediction Summary") # Create summary DataFrame summary_data = [] for symbol, pred_data in predictions['symbols'].items(): if 'ensemble' in pred_data: ensemble = pred_data['ensemble'] summary_data.append({ 'Symbol': symbol, 'Current Price': pred_data.get('current_price', 0), 'Predicted Price': ensemble['predicted_price'], 'Change': ensemble['price_change'], 'Change %': ensemble['price_change_pct'], 'Direction': ensemble['direction'], 'Confidence': ensemble['confidence'] }) if summary_data: df = pd.DataFrame(summary_data) # Display metrics in columns cols = st.columns(len(summary_data)) for i, row in df.iterrows(): with cols[i]: direction_color = "success-text" if row['Change %'] > 0 else "danger-text" direction_icon = "" if row['Change %'] > 0 else "" st.markdown(f""" <div class="metric-card"> <h3>{row['Symbol']} {direction_icon}</h3> <p><strong>Current:</strong> ${row['Current Price']:.2f}</p> <p><strong>Predicted:</strong> ${row['Predicted Price']:.2f}</p> <p class="{direction_color}"><strong>Change:</strong> {row['Change %']:+.2f}%</p> <p><strong>Confidence:</strong> {row['Confidence']:.1f}%</p> </div> """, unsafe_allow_html=True) # Detailed table st.subheader(" Detailed Results") st.dataframe(df, use_container_width=True) # Model comparison chart if len(selected_models) > 1: st.subheader(" Model Comparison") create_model_comparison_chart(predictions, selected_models) # Price movement visualization st.subheader(" Price Movement Visualization") create_price_visualization(df) # Download option csv = df.to_csv(index=False) st.download_button( label=" Download Results as CSV", data=csv, file_name=f"predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv", mime="text/csv" ) def create_model_comparison_chart(predictions, selected_models): """Create model comparison chart.""" comparison_data = [] for symbol, pred_data in predictions['symbols'].items(): if 'models' in pred_data: for model_name, model_pred in pred_data['models'].items(): comparison_data.append({ 'Symbol': symbol, 'Model': model_name.upper(), 'Predicted Price': model_pred['predicted_price'], 'Price Change %': model_pred['price_change_pct'] }) if comparison_data: df = pd.DataFrame(comparison_data) # Create grouped bar chart fig = px.bar( df, x='Symbol', y='Price Change %', color='Model', title="Model Predictions Comparison", barmode='group' ) fig.add_hline(y=0, line_dash="dash", line_color="gray") fig.update_layout(height=400) st.plotly_chart(fig, use_container_width=True) def create_price_visualization(df): """Create price movement visualization.""" fig = go.Figure() for _, row in df.iterrows(): # Current price fig.add_trace(go.Scatter( x=[row['Symbol'], row['Symbol']], y=[row['Current Price'], row['Predicted Price']], mode='lines+markers', name=row['Symbol'], line=dict(width=3), marker=dict(size=10) )) fig.update_layout( title="Current vs Predicted Prices", xaxis_title="Symbols", yaxis_title="Price ($)", height=400, showlegend=True ) st.plotly_chart(fig, use_container_width=True) def show_model_info(): """Show model information.""" st.subheader(" Model Information") col1, col2, col3 = st.columns(3) with col1: st.markdown(""" ** LSTM Model** - Best performer (RMSE: 192.77) - Great for sequential patterns - Directional accuracy: 50.9% """) with col2: st.markdown(""" ** CNN Model** - Good pattern recognition - RMSE: 242.62 - Directional accuracy: 47.0% """) with col3: st.markdown(""" ** Attention Model** - Focus on important periods - RMSE: 254.00 - Directional accuracy: 49.1% """) def show_sample_data(): """Show sample market data.""" st.subheader(" Sample Market Data") try: collector = DataCollector() sample_data = collector.get_yahoo_data("AAPL", period="5d") if not sample_data.empty: # Show recent data st.dataframe(sample_data.tail(), use_container_width=True) # Simple price chart fig = go.Figure() fig.add_trace(go.Scatter( x=sample_data['date'], y=sample_data['close'], mode='lines', name='AAPL Close Price', line=dict(color='#1f77b4', width=2) )) fig.update_layout( title="AAPL - Recent Price Movement", xaxis_title="Date", yaxis_title="Price ($)", height=300 ) st.plotly_chart(fig, use_container_width=True) except Exception as e: st.error(f"Error loading sample data: {e}") if __name__ == "__main__": main()